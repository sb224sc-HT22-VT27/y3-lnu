Tasks 1-3:  When designing software interfaces, assume each component as a class, where interfaces define the methods that facilitate interaction between components. So, an interface represents a contract that exposes specific behaviors (methods) to other components. For instance, consider an "Ordering" functionality that is implemented by the Transaction class. This class provides a public method for initiating orders. Other components, such as User/Supplier, can invoke this method to utilize the ordering functionality without directly managing the implementation details. Thus, a single interface abstraction is sufficient to allow User/Supplier to access the Transaction class's public methods. This eliminates the need for creating separate interfaces between Transaction and User/Supplier components.

Task 4: Don't mention technology-level details (like database type) in 1st level decomposition.
